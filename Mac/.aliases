# Set default block size for ls
export BLOCKSIZE=1k

# Show directory contents after stepping into
cd() {
    builtin cd "$@"
    ls -FG
}

# Show directories in different color with directory marker and permissions
alias ls="ls -FG"


# Easier navigation
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."

# Preferred less implementation
alias less="less -FSRXc"

# Allow creation of intermediate directories if specified
alias mkdir="mkdir -p"

# Show/Hide all hidden files in Finder
alias showHiddenFiles="defaults write com.apple.finder ShowAllFiles TRUE && killall Finder"
alias hideHiddenFiles="defaults write com.apple.finder ShowAllFiles FALSE && killall Finder"

# Show/Hide all desktop icons (useful when presenting)
alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"
alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"

# Enable/Disable Spotlight
alias spotlightOff="sudo mdutil -a -i off"
alias spotlightOn="sudo mdutil -a -i on"

# Reload the shell (i.e. invoke as a login shell)
alias reload="exec ${SHELL} -l"

# Merge PDF files - Usage: `mergepdf -o output.pdf input{1,2,3}.pdf`
alias mergepdf="/System/Library/Automator/Combine\ PDF\ Pages.action/Contents/Resources/join.py"

# Search for a specific file
alias search="find . -name"

# Open a file in sublime
alias subl='/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl'



# Zip a folder
zipf () { 
    zip -r "$1".zip "$1"
} 

# Extract most know archives with one command
extract () {
    if [ -f $1 ]; then
      case $1 in
        *.tar.bz2)   tar xjf $1     ;;
        *.tar.gz)    tar xzf $1     ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar e $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xf $1      ;;
        *.tbz2)      tar xjf $1     ;;
        *.tgz)       tar xzf $1     ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)     echo ""$1" cannot be extracted via extract()" ;;
        esac
    else
        echo ""$1" is not a valid file"
    fi
}

# Open a file or if no argument is given the entire directory in sublime
sublime() {
    if [ $# -eq 0 ]; then
        subl .;
    else
        subl "$@";
    fi;
}

# Open a file or if no argument is given the entire directory in finder
finder() {
    if [ $# -eq 0 ]; then
        open .;
    else
        open "$@";
    fi;
}

# Open a file or if no argument is given the entire directory in atom
openatom() {
    if [ $# -eq 0 ]; then
        atom .;
    else
        atom "$@";
    fi;
}

# Update macOS Apps, Homebrwe, Ruby Gems, NPM and installed packages
update () {
  sudo softwareupdate -i -a
  brew update
  brew upgrade
  brew cleanup
  npm install npm -g
  npm update -g
  gem update --system
  gem update
  gem cleanup
}

# Change file permissions to prefered
updatePermissions() {
    find ~/Documents -type d -exec chmod 775 {} +
    find ~/Documents -type f -exec chmod 774 {} +
    find ~/Desktop -type d -exec chmod 775 {} +
    find ~/Desktop -type f -exec chmod 774 {} +
    find ~/Downloads -type d -exec chmod 775 {} +
    find ~/Downloads -type f -exec chmod 774 {} +
}

# Make file executible
makeExecutable() {
    chmod 775 $1
}

# Run speed test
runspeedtest() {
    echo "Speed Test"
    speedtest | grep "load:"
}

# Get public and local IP addresses
getIP() {
    echo "Local IP"
    ipconfig getifaddr en0;
    echo "Public IP"
    curl ifconfig.me
}

# Compile and run java file
javaRun() {
    javac *.java
    java $1
}

# Compile and run Kotlin file
kotlinRun() {
    Kotlinc *.kt
    kotlin $1
}

# Compile and run r file
rRun(){
    R CMD BATCH *.r
}

# Compile and run c file
cRun(){
    gcc *.c -o $1
    ./$1
}

# Compile and run c++ file
cppRun(){
    g++ *.cpp -o $1
    ./$1
}


# Docker Debian enviornment
# Navigate to debian folder with .bashrc file and Dockerfile
# Run 
# docker build -t debian .
# This will build the project with the specifications given in the Dockerfile
# Run 
# docker run --name="debian_command_line" -it -v ~/Documents/debian:/Documents debian
# This will start a debian enviornment

# Relaunch the existing debian enviornment
debianStart(){
    docker start debian_command_line;
    docker attach debian_command_line;
}


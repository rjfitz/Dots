# Remove last opened message when opened
clear

# Setup colors for use
export TERM='gnome-256color';

bold=$(tput bold);
blue=$(tput setaf 33)
green=$(tput setaf 46)
yellow=$(tput setaf 226)
orange=$(tput setaf 202)
red=$(tput setaf 196)
white=$(tput setaf 15)
fixColor=$(tput sgr0)

# Github support for prompt 
prompt_git() {
    local s='';
    local branchName='';

    # Check if the current directory is in a Git repository.
    if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

            # Ensure the index is up to date.
            git update-index --really-refresh -q &>/dev/null;

            # Check for uncommitted changes in the index.
            if ! $(git diff --quiet --ignore-submodules --cached); then
                s+='+';
            fi;

            # Check for unstaged changes.
            if ! $(git diff-files --quiet --ignore-submodules --); then
                s+='!';
            fi;

            # Check for untracked files.
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                s+='?';
            fi;

            # Check for stashed files.
            if $(git rev-parse --verify refs/stash &>/dev/null); then
                s+='$';
            fi;

        fi;

        # Get the short symbolic ref.
        # If HEAD isnâ€™t a symbolic ref, get the short SHA for the latest commit
        # Otherwise, just give up.
        branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
            git rev-parse --short HEAD 2> /dev/null || \
            echo '(unknown)')";

        [ -n "${s}" ] && s=" [${s}]";

        echo -e "${1}${branchName}${2}${s}";
    else
        return;
    fi;
}

# Highlight the name if using root 
if [[ "${USER}" == "root" ]]; then
    userStyle="${bold}${red}";
else
    userStyle="${red}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
    hostStyle="${bold}${orange}";
else
    hostStyle="${orange}";
fi;

# Set terminal prompt
PS1="\n"
PS1+="\[${userStyle}\]\u " # User info
PS1+="\[${white}\]at "
PS1+="\[${hostStyle}\]\h " # Machine Info
PS1+="\[${white}\]in "
PS1+="\[${yellow}\]\W" # Directory
PS1+="\$(prompt_git \"\[${white}\] on \[${blue}\]\" \"\[${blue}\]\")"; # Git repository
PS1+="\[${green}\]\n> " # Cursor
PS1+="\[${fixColor}\]"
export PS1

# Set terminal title
PROMPT_COMMAND='echo -en "\033]0;Matt Kline - Terminal\a"'
